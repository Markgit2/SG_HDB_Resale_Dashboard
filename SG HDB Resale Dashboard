#Run:     streamlit run c:/Users/USER/Desktop/Code/stdashboard_test.py


import streamlit as st
import pandas as pd
import numpy as np
import json
import re
import altair as alt
import plotly.express as px
import requests

#Page config
st.set_page_config(
    page_title="SG HDB Resale Dashboard",
    layout="wide"
)

# Raw GitHub URLs (replace with your own)
CSV_URL = "https://raw.githubusercontent.com/Markgit2/SG_Property_Dashboards/refs/heads/main/Resale%20flat%20prices%20based%20on%20registration%20date%20from%20Jan-2017%20onwards.csv"
GEOJSON_URL = "https://raw.githubusercontent.com/Markgit2/SG_Property_Dashboards/refs/heads/main/MasterPlan2019PlanningAreaBoundaryNoSea1.geojson"


#Load data
@st.cache_data
def load_data():
    df = pd.read_csv(CSV_URL)
    df['month'] = pd.to_datetime(df['month'])
    df['remaining_lease_years'] = df['remaining_lease'].str.extract(r'(\d+)\s+year').astype(float)

    df["resale_price"] = pd.to_numeric(df["resale_price"], errors='coerce').fillna(0)
    df["resale_price"] = np.ceil(df["resale_price"])
    df["formatted_resale_price"] = df["resale_price"].apply(lambda x: f"${int(x):,}")

    return df

@st.cache_data
def load_geojson():
    resp = requests.get(GEOJSON_URL)
    resp.raise_for_status()
    geojson = resp.json()


    town_features = {}
    for feature in geojson['features']:
        desc = feature['properties']['Description']
        match = re.search(r'<th>PLN_AREA_N<\/th>\s*<td>(.*?)<\/td>', desc)
        if match:
            town = match.group(1).upper()
            feature["properties"]["town"] = town
            town_features[town] = feature

    return town_features

#Sidebar
df = load_data()
geojson_features = load_geojson()

with st.sidebar:
    st.title("Filters")
    selected_town = st.selectbox("Select Town", sorted(df['town'].unique()))
    selected_flat_type = st.multiselect("Select Flat Type", sorted(df['flat_type'].unique()), default=["3 ROOM", "4 ROOM"])

    min_lease = int(df['remaining_lease_years'].min())
    max_lease = int(df['remaining_lease_years'].max())
    selected_lease = st.slider("Filter by Remaining Lease (Years)", min_lease, max_lease, (min_lease, max_lease))

#Filtered Data
filtered_df = df[
    (df['town'] == selected_town) &
    (df['flat_type'].isin(selected_flat_type)) &
    (df['remaining_lease_years'] >= selected_lease[0]) &
    (df['remaining_lease_years'] <= selected_lease[1])
]

#Layout Columns
st.title("Singapore HDB Resale Dashboard")
st.markdown(f"Showing data for **{selected_town}**, flat types: {', '.join(selected_flat_type)}")

col = st.columns((3, 1), gap='medium')

with col[0]:
    #Resale Diagram
    st.subheader("📈 Resale Price Trends")
    trend_mode = st.radio("Select Trendline Mode", ["Flat Types in Selected Town", "Compare Multiple Towns"])

    if trend_mode == "Flat Types in Selected Town":
        trend_df = filtered_df.copy()
        trend_df['year'] = trend_df['month'].dt.year
        chart_data = trend_df.groupby(['year', 'flat_type'])['resale_price'].mean().reset_index()

        chart = alt.Chart(chart_data).mark_line().encode(
            x=alt.X('year:O', title='Year'),
            y='resale_price:Q',
            color='flat_type:N',
            tooltip=['year:O', 'flat_type', 'resale_price']
        ).properties(width=750, height=400)

        st.altair_chart(chart, use_container_width=True)

    elif trend_mode == "Compare Multiple Towns":
        selected_towns = st.multiselect("Compare Towns", sorted(df["town"].unique()), default=[selected_town])
        use_smoothing = st.checkbox("Apply 3-Month Moving Average", value=True)

        town_df = df[
            (df["town"].isin(selected_towns)) &
            (df["flat_type"].isin(selected_flat_type)) &
            (df["remaining_lease_years"] >= selected_lease[0]) &
            (df["remaining_lease_years"] <= selected_lease[1])
        ]
        grouped = town_df.groupby(["month", "town"])['resale_price'].mean().reset_index()

        if use_smoothing:
            grouped['resale_price'] = grouped.groupby("town")['resale_price'].transform(
                lambda x: x.rolling(window=3, min_periods=1).mean()
            )

        trend_chart = alt.Chart(grouped).mark_line().encode(
            x=alt.X('month:T', axis=alt.Axis(format='%Y')),
            y='resale_price:Q',
            color='town:N',
            tooltip=[alt.Tooltip("month:T", format="%Y"), "town", "resale_price"]
        ).properties(width=750, height=400)

        st.altair_chart(trend_chart, use_container_width=True)

    #Comparison of prices for room types
    st.subheader("📊 Resale Price Distribution")
    box_fig = px.box(filtered_df, x="flat_type", y="resale_price", color="flat_type")
    st.plotly_chart(box_fig, use_container_width=True)

    #Map
    st.subheader("🗺️ Choropleth Map - Avg Resale Price by Town")

    #Configuring map data
    map_df = df[df['flat_type'].isin(selected_flat_type)]
    avg_prices = map_df.groupby('town')['resale_price'].mean().reset_index()
    avg_prices.columns = ['town', 'mean_resale_price']

    matched_features = [feature for town, feature in geojson_features.items() if town in avg_prices['town'].values]
    choropleth_geojson = {
        "type": "FeatureCollection",
        "features": matched_features
    }

    choropleth_fig = px.choropleth_mapbox(
        avg_prices,
        geojson=choropleth_geojson,
        locations='town',
        featureidkey="properties.town",
        color='mean_resale_price',
        color_continuous_scale="YlOrRd",
        mapbox_style="carto-positron",
        zoom=10,
        center={"lat": 1.3521, "lon": 103.8198},
        opacity=0.6,
        labels={'mean_resale_price': 'Mean Resale Price'}
    )

    st.plotly_chart(choropleth_fig, use_container_width=True)

with col[1]:
    #Top towns at the right side
    st.subheader("📌 Top Towns by Avg Price")
    ranked = df.groupby("town")["resale_price"].mean().round().reset_index()
    ranked = ranked.sort_values(by="resale_price", ascending=False)
    ranked["Avg Resale Price (SGD)"] = ranked["resale_price"].apply(lambda x: f"${int(x):,}")

    st.dataframe(
        ranked[["town", "Avg Resale Price (SGD)"]],
        use_container_width=True,
        hide_index=True
    )

#Option to show data
if st.checkbox("Show Raw Filtered Data"):
    st.write(filtered_df)
